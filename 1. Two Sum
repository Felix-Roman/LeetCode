1. Two Sum
Easy
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.

Python:
      class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        seen = {}

        for i, num in enumerate(nums):
            complement = target - num
            if complement in seen:
                return [seen[complement],i]
            seen[num] = i
            
C++:
      class Solution {
  public:
      vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int,int> seen;

        for(int i = 0; i < nums.size(); i++)
        {
          int compliment = target - nums[i];

          if(seen.find(compliment) != seen.end())
          {
              return {seen[compliment],i};
          }
          seen[nums[i]] = i;
        }

        return {};
      }
  };

C#:
  public class Solution {
    public int[] TwoSum(int[] nums, int target) {
        Dictionary<int,int> seen = new Dictionary<int,int>();

        for(int i = 0; i < nums.Length; i++)
        {
            int compliment = target - nums[i];

            if(seen.ContainsKey(compliment))
            {
                return new int[] {seen[compliment],i};
            }

            seen[nums[i]] = i;
        }

        return new int[0];
    }
} 
